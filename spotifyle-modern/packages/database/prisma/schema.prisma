// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  
  // Spotify specific fields
  spotifyId     String?   @unique
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  gamesCreated  Game[]    @relation("Creator")
  gameSessions  GameSession[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  accessToken  String?  @db.Text
  refreshToken String?  @db.Text
  expiresAt    DateTime?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Game models
model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  gamesPlayed     Int      @default(0)
  gamesWon        Int      @default(0)
  totalScore      Int      @default(0)
  favoriteArtists Json[]
  favoriteGenres  String[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Game {
  id          String      @id @default(cuid())
  code        String      @unique @db.VarChar(6)
  type        GameType
  status      GameStatus  @default(CREATING)
  maxStages   Int         @default(5)
  maxPlayers  Int?
  
  creator     User        @relation("Creator", fields: [creatorId], references: [id])
  creatorId   String
  
  stages      Stage[]
  sessions    GameSession[]
  
  createdAt   DateTime    @default(now())
  startedAt   DateTime?
  endedAt     DateTime?
  
  @@index([code])
  @@index([status])
}

enum GameType {
  ARTIST_TRIVIA
  FIND_TRACK_ART
  MULTIPLE_TRACK_LOCKIN
}

enum GameStatus {
  CREATING
  WAITING
  IN_PROGRESS
  COMPLETED
}

model Stage {
  id            String   @id @default(cuid())
  gameId        String
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  question      Json
  choices       Json
  correctAnswer String
  timeLimit     Int      @default(30)
  points        Int      @default(100)
  order         Int
  
  answers       Answer[]
  
  @@unique([gameId, order])
}

model GameSession {
  id          String    @id @default(cuid())
  gameId      String
  game        Game      @relation(fields: [gameId], references: [id])
  
  playerId    String
  player      User      @relation(fields: [playerId], references: [id])
  
  answers     Answer[]
  finalScore  Int?
  position    Int?
  
  joinedAt    DateTime  @default(now())
  leftAt      DateTime?
  
  @@unique([gameId, playerId])
}

model Answer {
  id          String      @id @default(cuid())
  sessionId   String
  session     GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  stageId     String
  stage       Stage       @relation(fields: [stageId], references: [id])
  
  answer      String
  isCorrect   Boolean
  timeSpent   Int
  points      Int
  
  answeredAt  DateTime    @default(now())
}